I moved the objects to:
[7.90277564 7.30277564]
[8.10277564 2.20277564]
I moved the objects to:
[5.70277564 2.90277564]
[4.90277564 2.40277564]
Traceback (most recent call last):
  File "C:\Users\tomda\Desktop\symmetry_learning\symmetry_shift_runner.py", line 51, in <module>
    main(config)
  File "C:\Users\tomda\Desktop\symmetry_learning\symmetry_shift_runner.py", line 36, in main
    bc_control(config)
  File "C:\Users\tomda\Desktop\symmetry_learning\symmetry_shift_runner.py", line 17, in bc_control
    bcRunner(env)
  File "C:\Users\tomda\Desktop\symmetry_learning\algos\bc.py", line 291, in bcRunner
    bc(env, model)
  File "C:\Users\tomda\Desktop\symmetry_learning\algos\bc.py", line 139, in bc
    trajectories = get_trajectories(env, model, num_trajectories=budget)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\tomda\Desktop\symmetry_learning\algos\bc.py", line 98, in get_trajectories
    state, _, done, _ = env.step(action)
                        ^^^^^^^^^^^^^^^^
  File "C:\Users\tomda\Desktop\symmetry_learning\environment\symmetry_move.py", line 240, in step
    reward = self.compute_reward()
             ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\tomda\Desktop\symmetry_learning\environment\symmetry_move.py", line 216, in compute_reward
    theta_diff = np.min(np.abs(t1_theta - t2_theta), 2 * np.pi - np.abs(t1_theta - t2_theta))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<__array_function__ internals>", line 200, in amin
  File "C:\Users\tomda\anaconda3\Lib\site-packages\numpy\core\fromnumeric.py", line 2946, in amin
    return _wrapreduction(a, np.minimum, 'min', axis, None, out,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\tomda\anaconda3\Lib\site-packages\numpy\core\fromnumeric.py", line 84, in _wrapreduction
    return reduction(axis=axis, out=out, **passkwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\tomda\anaconda3\Lib\site-packages\numpy\core\_methods.py", line 45, in _amin
    return umr_minimum(a, axis, None, out, keepdims, initial, where)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: 'numpy.float64' object cannot be interpreted as an integer